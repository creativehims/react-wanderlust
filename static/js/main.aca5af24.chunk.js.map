{"version":3,"sources":["helpers.js","Forecast.js","Venues.js","main.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["weekDays","kelvinToCelcius","k","toFixed","Forecast","props","currentDay","forecast","id","name","className","Date","getDay","main","temp","weather","description","wind","speed","src","icon","Venues","venues","map","venue","index","venueIcon","categories","venueImgSrc","prefix","suffix","location","iconSource","address","city","country","createVenueHTML","Main","getVenues","urlToFetch","fetch","response","ok","json","jsonResponse","console","log","groups","items","item","getForecast","Display","useState","setCity","executeSearch","alt","type","placeholder","value","onChange","target","onClick","App","setVenues","setForecast","a","ven","Object","entries","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aca5af24.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport \"./reset.css\";\n\nexport const weekDays = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport const createVenueHTML = (name, location, iconSource, index) => {\n  // id={`venue${index + 1}`}\n  return (\n    <div key={index} className=\"venue\">\n      <h2>{name}</h2>\n      <img className=\"venueimage\" src={iconSource} />\n      <h3>Address:</h3>\n      <p>{location.address}</p>\n      <p>{location.city}</p>\n      <p>{location.country}</p>\n    </div>\n  );\n};\n\nexport const createWeatherHTML = (currentDay) => {\n  return (\n    <>\n      <h2>{weekDays[new Date().getDay()]}</h2>\n      <h2>Temperature: {kelvinToCelcius(currentDay.main.temp)}&deg;C</h2>\n      <h2>Condition: {currentDay.weather[0].description}</h2>\n      <h2>Wind: {currentDay.wind.speed} Km/hr</h2>\n      <img\n        src={`https://openweathermap.org/img/wn/${currentDay.weather[0].icon}@2x.png`}\n      />\n    </>\n  );\n};\n\nconst kelvinToCelcius = (k) => (k - 273.15).toFixed(0);\n","import React from \"react\";\nimport { createWeatherHTML } from \"./helpers\";\nimport \"./style.css\";\nimport \"./reset.css\";\n\nconst Forecast = (props) => {\n  const { forecast } = props;\n  return (\n    <>\n      <div id=\"destination\">\n        <h2>{forecast.name}</h2>\n      </div>\n      <div className=\"sectiontitle\">\n        <h2>CURRENT WEATHER</h2>\n      </div>\n      <section id=\"weather\">\n        <div className=\"weather\" id=\"weather1\">\n          {createWeatherHTML(forecast)}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Forecast;\n","import React from \"react\";\nimport { createVenueHTML } from \"./helpers\";\nimport \"./style.css\";\nimport \"./reset.css\";\n\nconst Venues = (props) => {\n  const { venues } = props;\n\n  return (\n    <>\n      <div className=\"sectiontitle\">\n        <h2>TOP ATTRACTIONS</h2>\n      </div>\n      <section id=\"venues\">\n        {venues.map((venue, index) => {\n          if (index > 4) return;\n          const venueIcon = venue.categories[0].icon;\n          const venueImgSrc = `${venueIcon.prefix}bg_64${venueIcon.suffix}`;\n\n          let venueContent = createVenueHTML(\n            venue.name,\n            venue.location,\n            venueImgSrc,\n            index\n          );\n          return venueContent;\n        })}\n      </section>\n      <footer></footer>\n    </>\n  );\n};\n\nexport default Venues;\n","// Foursquare API Info\nconst clientId = \"C1HCEVEOKXMXSVBTJ2SMJL2UVTOKPZYTSQLO4Q1A55EJKSXN\";\nconst clientSecret = \"2FIBBFTEYUQOOY4CS3CABYBPHEARWUO0KQXU2VW3GDLG23YM\";\nconst url = \"https://api.foursquare.com/v2/venues/explore?near=\";\n\n// OpenWeather Info\nconst openWeatherKey = \"75cd72df178ed39030732459c2a5fbf1\";\nconst weatherUrl = \"https://api.openweathermap.org/data/2.5/weather\";\n\nconst Main = {\n  async getVenues(city) {\n    //const city = $input.val();\n    const urlToFetch = `${url}${city}&limit=10&client_id=${clientId}&client_secret=${clientSecret}&v=20201230`;\n\n    try {\n      const response = await fetch(urlToFetch);\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        console.log(jsonResponse);\n        let venues = jsonResponse.response.groups[0].items;\n        venues = venues.map((item) => item.venue);\n        return venues;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  async getForecast(city) {\n    const urlToFetch = `${weatherUrl}?&q=${city}&APPID=${openWeatherKey}`;\n    try {\n      const response = await fetch(urlToFetch);\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\n// import \"./style.css\";\n// import \"./reset.css\";\n\nconst Display = (props) => {\n  const [city, setCity] = useState(\"\");\n  const { executeSearch } = props;\n\n  const handleChange = ({ target }) => {\n    setCity(target.value);\n  };\n\n  return (\n    <>\n      <header>\n        <img\n          className=\"logo\"\n          src=\"https://content.codecademy.com/courses/intermediate-javascript-requests/wanderlust/logo.svg\"\n          alt=\"logo\"\n        />\n      </header>\n      <main>\n        <h1>Where do you want to land?</h1>\n        <input\n          type=\"text\"\n          id=\"city\"\n          placeholder=\"Enter City\"\n          value={city}\n          onChange={handleChange}\n        />\n        <button id=\"button\" type=\"submit\" onClick={() => executeSearch(city)}>\n          Submit\n        </button>\n      </main>\n    </>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport Forecast from \"./Forecast\";\nimport Venues from \"./Venues\";\nimport Main from \"./main\";\nimport Display from \"./Display\";\nimport \"./style.css\";\n\nconst App = () => {\n  const [venues, setVenues] = useState([]);\n  const [forecast, setForecast] = useState({});\n\n  const executeSearch = async (city) => {\n    const ven = city && (await Main.getVenues(city));\n    setVenues(ven);\n    const forecast = city && (await Main.getForecast(city));\n    setForecast(forecast);\n  };\n\n  return (\n    <>\n      <Display executeSearch={executeSearch} />\n      <div className=\"container\">\n        {forecast && Object.entries(forecast).length > 0 && (\n          <Forecast forecast={forecast} />\n        )}\n        {venues && venues.length > 0 && <Venues venues={venues} />}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}