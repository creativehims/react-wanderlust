{"version":3,"sources":["ForecastInfo.js","Forecast.js","Venue.js","Venues.js","main.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["weekDays","ForecastInfo","props","k","currentDay","className","id","Date","getDay","main","temp","toFixed","weather","description","wind","speed","src","icon","alt","name","Forecast","forecast","Venue","location","iconSource","address","city","country","Venues","venues","map","venue","index","venueIcon","categories","venueImgSrc","prefix","suffix","require","config","clientId","process","FoursquareClientId","clientSecret","FoursquareClientSecret","openWeatherKey","OpenWeatherKey","Main","getVenues","urlToFetch","fetch","response","ok","json","jsonResponse","console","log","groups","items","item","getForecast","Display","useState","setCity","executeSearch","type","placeholder","value","onChange","target","onClick","App","setVenues","setForecast","a","ven","Object","entries","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe139ec0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst weekDays = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nconst kelvinToCelcius = (k) => (k - 273.15).toFixed(0);\n\nconst ForecastInfo = (props) => {\n  const { currentDay } = props;\n  return (\n    <div className=\"weather\" id=\"weather1\">\n      <h2>{weekDays[new Date().getDay()]}</h2>\n      <h2>Temperature: {kelvinToCelcius(currentDay.main.temp)}&deg;C</h2>\n      <h2>Condition: {currentDay.weather[0].description}</h2>\n      <h2>Wind: {currentDay.wind.speed} Km/hr</h2>\n      <img\n        src={`https://openweathermap.org/img/wn/${currentDay.weather[0].icon}@2x.png`}\n        alt={currentDay.name}\n      />\n    </div>\n  );\n};\n\nexport default ForecastInfo;\n","import React from \"react\";\nimport \"./style.css\";\nimport ForecastInfo from \"./ForecastInfo\";\n\nconst Forecast = (props) => {\n  const { forecast } = props;\n  return (\n    <>\n      <div id=\"destination\">\n        <h2>{forecast.name}</h2>\n      </div>\n      <div className=\"sectiontitle\">\n        <h2>CURRENT WEATHER</h2>\n      </div>\n      <section id=\"weather\">\n        <ForecastInfo currentDay={forecast} />\n      </section>\n    </>\n  );\n};\n\nexport default Forecast;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Venue = (props) => {\n  const { name, location, iconSource, id } = props;\n  return (\n    <div key={id} className=\"venue\">\n      <h2>{name}</h2>\n      <img className=\"venueimage\" src={iconSource} alt={name} />\n      <h3>Address:</h3>\n      <p>{location.address}</p>\n      <p>{location.city}</p>\n      <p>{location.country}</p>\n    </div>\n  );\n};\n\nexport default Venue;\n","import React from \"react\";\nimport \"./style.css\";\nimport Venue from \"./Venue\";\n\nconst Venues = (props) => {\n  const { venues } = props;\n\n  return (\n    <>\n      <div className=\"sectiontitle\">\n        <h2>TOP ATTRACTIONS</h2>\n      </div>\n      <section id=\"venues\">\n        {venues.map((venue, index) => {\n          if (index > 4) return null;\n          const venueIcon = venue.categories[0].icon;\n          const venueImgSrc = `${venueIcon.prefix}bg_64${venueIcon.suffix}`;\n          return (\n            <Venue\n              name={venue.name}\n              location={venue.location}\n              iconSource={venueImgSrc}\n              key={index}\n              id={index}\n            />\n          );\n        })}\n      </section>\n      <footer></footer>\n    </>\n  );\n};\n\nexport default Venues;\n","require('dotenv').config();\n\n// Foursquare API Info\nconst clientId = process.env.FoursquareClientId;\nconst clientSecret = process.env.FoursquareClientSecret;\nconst url = 'https://api.foursquare.com/v2/venues/explore?near=';\n\n// OpenWeather Info\nconst openWeatherKey = process.env.OpenWeatherKey;\nconst weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n\nconst Main = {\n  async getVenues(city) {\n    //const city = $input.val();\n    const urlToFetch = `${url}${city}&limit=10&client_id=${clientId}&client_secret=${clientSecret}&v=20201230`;\n\n    try {\n      const response = await fetch(urlToFetch);\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        console.log(jsonResponse);\n        let venues = jsonResponse.response.groups[0].items;\n        venues = venues.map((item) => item.venue);\n        return venues;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  async getForecast(city) {\n    const urlToFetch = `${weatherUrl}?&q=${city}&APPID=${openWeatherKey}`;\n    try {\n      const response = await fetch(urlToFetch);\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        return jsonResponse;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport \"./style.css\";\n\nconst Display = (props) => {\n  const [city, setCity] = useState(\"\");\n  const { executeSearch } = props;\n\n  const handleChange = ({ target }) => {\n    setCity(target.value);\n  };\n\n  return (\n    <>\n      <header>\n        <img\n          className=\"logo\"\n          src=\"https://content.codecademy.com/courses/intermediate-javascript-requests/wanderlust/logo.svg\"\n          alt=\"logo\"\n        />\n      </header>\n      <main>\n        <h1>Where do you want to land?</h1>\n        <input\n          type=\"text\"\n          id=\"city\"\n          placeholder=\"Enter City\"\n          value={city}\n          onChange={handleChange}\n        />\n        <button id=\"button\" type=\"submit\" onClick={() => executeSearch(city)}>\n          Submit\n        </button>\n      </main>\n    </>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport Forecast from \"./Forecast\";\nimport Venues from \"./Venues\";\nimport Main from \"./main\";\nimport Display from \"./Display\";\nimport \"./style.css\";\n\nconst App = () => {\n  const [venues, setVenues] = useState([]);\n  const [forecast, setForecast] = useState({});\n\n  const executeSearch = async (city) => {\n    const ven = city && (await Main.getVenues(city));\n    setVenues(ven);\n    const forecast = city && (await Main.getForecast(city));\n    setForecast(forecast);\n  };\n\n  return (\n    <>\n      <Display executeSearch={executeSearch} />\n      <div className=\"container\">\n        {forecast && Object.entries(forecast).length > 0 && (\n          <Forecast forecast={forecast} />\n        )}\n        {venues && venues.length > 0 && <Venues venues={venues} />}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}